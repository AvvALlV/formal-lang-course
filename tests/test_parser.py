from project.parser import check_parser_correct, generate_dot_str
from textwrap import dedent


def test_empty():
    assert check_parser_correct("")


def test_not_belongs():
    assert not check_parser_correct("something")
    assert not check_parser_correct("print")
    assert not check_parser_correct("let =a ")
    assert not check_parser_correct("{10 {}{}")
    assert not check_parser_correct('g1 = load "wine.dot"')


def test_print():
    assert check_parser_correct("print 1;")
    assert check_parser_correct("print {1..10};")
    assert check_parser_correct("print {1, 2, 3, 10};")
    assert check_parser_correct('print load "wine.dot";')


def test_bind():
    assert check_parser_correct("let x = 1;")
    assert check_parser_correct("let x = {1..10};")
    assert check_parser_correct("let x = {1, 2, 3, 5};")
    assert check_parser_correct('let g1 = load "wine.dot";')


def test_lambda():
    assert check_parser_correct("let res = map (get_edges g) with g => g;")
    assert check_parser_correct("let res = filter (get_edges g) with g => g;")
    assert not check_parser_correct("let res = g => g")
    assert not check_parser_correct("g => g => g;")


example1 = """let g1 = load "wine.dot";
let g = set_start {0..100} of (set_final (get_vertices g1) of g1);

let l1 = "l1" | "l2";
let q1 = ("type" | l1)*;


let q2 = "sub_class_of" + l1;

let res1 = g & q1;
let res2 = g & q2;


print res1;

let s = get_start g;

let vertices1 = filter (map (get_edges res1) with ((u_g, u_q1), l, (v_g, v_q1)) => u_g) with v => v in s;
let vertices2 = filter (map (get_edges res2) with ((u_g, u_q2), l, (v_g, v_q2)) => u_g) with (v => v in s);

let vertices = vertices1 & vertices2;
print vertices;
"""


def test_example_belongs():
    assert check_parser_correct(example1)



# def test_to_dot():
#     res = generate_dot_str(example1)
#     print(dedent(res))
#     assert dedent(res) == dedent(
#         """digraph tree {
# 1 [label=program];
# 1 -> 2;
# 2 [label=stmt];
# 2 -> 3;
# 3 [label=bind];
# 3 -> 4;
# 4 [label="TERM: let"];
# 3 -> 5;
# 5 [label=pattern];
# 5 -> 6;
# 6 [label=var];
# 6 -> 7;
# 7 [label="TERM: g1"];
# 3 -> 8;
# 8 [label="TERM: ="];
# 3 -> 9;
# 9 [label=expr];
# 9 -> 10;
# 10 [label="TERM: load"];
# 9 -> 11;
# 11 [label="TERM: \\"wine.dot\\""];
# 1 -> 12;
# 12 [label="TERM: ;"];
# 1 -> 13;
# 13 [label=stmt];
# 13 -> 14;
# 14 [label=bind];
# 14 -> 15;
# 15 [label="TERM: let"];
# 14 -> 16;
# 16 [label=pattern];
# 16 -> 17;
# 17 [label=var];
# 17 -> 18;
# 18 [label="TERM: g"];
# 14 -> 19;
# 19 [label="TERM: ="];
# 14 -> 20;
# 20 [label=expr];
# 20 -> 21;
# 21 [label="TERM: set_start"];
# 20 -> 22;
# 22 [label=expr];
# 22 -> 23;
# 23 [label=val];
# 23 -> 24;
# 24 [label="TERM: {0..100}"];
# 20 -> 25;
# 25 [label="TERM: of"];
# 20 -> 26;
# 26 [label=expr];
# 26 -> 27;
# 27 [label="TERM: ("];
# 26 -> 28;
# 28 [label=expr];
# 28 -> 29;
# 29 [label="TERM: set_final"];
# 28 -> 30;
# 30 [label=expr];
# 30 -> 31;
# 31 [label="TERM: ("];
# 30 -> 32;
# 32 [label=expr];
# 32 -> 33;
# 33 [label="TERM: get_vertices"];
# 32 -> 34;
# 34 [label=expr];
# 34 -> 35;
# 35 [label=var];
# 35 -> 36;
# 36 [label="TERM: g1"];
# 30 -> 37;
# 37 [label="TERM: )"];
# 28 -> 38;
# 38 [label="TERM: of"];
# 28 -> 39;
# 39 [label=expr];
# 39 -> 40;
# 40 [label=var];
# 40 -> 41;
# 41 [label="TERM: g1"];
# 26 -> 42;
# 42 [label="TERM: )"];
# 1 -> 43;
# 43 [label="TERM: ;"];
# 1 -> 44;
# 44 [label=stmt];
# 44 -> 45;
# 45 [label=bind];
# 45 -> 46;
# 46 [label="TERM: let"];
# 45 -> 47;
# 47 [label=pattern];
# 47 -> 48;
# 48 [label=var];
# 48 -> 49;
# 49 [label="TERM: l1"];
# 45 -> 50;
# 50 [label="TERM: ="];
# 45 -> 51;
# 51 [label=expr];
# 51 -> 52;
# 52 [label=expr];
# 52 -> 53;
# 53 [label=val];
# 53 -> 54;
# 54 [label="TERM: \\"l1\\""];
# 51 -> 55;
# 55 [label="TERM: |"];
# 51 -> 56;
# 56 [label=expr];
# 56 -> 57;
# 57 [label=val];
# 57 -> 58;
# 58 [label="TERM: \\"l2\\""];
# 1 -> 59;
# 59 [label="TERM: ;"];
# 1 -> 60;
# 60 [label=stmt];
# 60 -> 61;
# 61 [label=bind];
# 61 -> 62;
# 62 [label="TERM: let"];
# 61 -> 63;
# 63 [label=pattern];
# 63 -> 64;
# 64 [label=var];
# 64 -> 65;
# 65 [label="TERM: q1"];
# 61 -> 66;
# 66 [label="TERM: ="];
# 61 -> 67;
# 67 [label=expr];
# 67 -> 68;
# 68 [label=expr];
# 68 -> 69;
# 69 [label="TERM: ("];
# 68 -> 70;
# 70 [label=expr];
# 70 -> 71;
# 71 [label=expr];
# 71 -> 72;
# 72 [label=val];
# 72 -> 73;
# 73 [label="TERM: \\"type\\""];
# 70 -> 74;
# 74 [label="TERM: |"];
# 70 -> 75;
# 75 [label=expr];
# 75 -> 76;
# 76 [label=var];
# 76 -> 77;
# 77 [label="TERM: l1"];
# 68 -> 78;
# 78 [label="TERM: )"];
# 67 -> 79;
# 79 [label="TERM: *"];
# 1 -> 80;
# 80 [label="TERM: ;"];
# 1 -> 81;
# 81 [label=stmt];
# 81 -> 82;
# 82 [label=bind];
# 82 -> 83;
# 83 [label="TERM: let"];
# 82 -> 84;
# 84 [label=pattern];
# 84 -> 85;
# 85 [label=var];
# 85 -> 86;
# 86 [label="TERM: q2"];
# 82 -> 87;
# 87 [label="TERM: ="];
# 82 -> 88;
# 88 [label=expr];
# 88 -> 89;
# 89 [label=expr];
# 89 -> 90;
# 90 [label=val];
# 90 -> 91;
# 91 [label="TERM: \\"sub_class_of\\""];
# 88 -> 92;
# 92 [label="TERM: +"];
# 88 -> 93;
# 93 [label=expr];
# 93 -> 94;
# 94 [label=var];
# 94 -> 95;
# 95 [label="TERM: l1"];
# 1 -> 96;
# 96 [label="TERM: ;"];
# 1 -> 97;
# 97 [label=stmt];
# 97 -> 98;
# 98 [label=bind];
# 98 -> 99;
# 99 [label="TERM: let"];
# 98 -> 100;
# 100 [label=pattern];
# 100 -> 101;
# 101 [label=var];
# 101 -> 102;
# 102 [label="TERM: res1"];
# 98 -> 103;
# 103 [label="TERM: ="];
# 98 -> 104;
# 104 [label=expr];
# 104 -> 105;
# 105 [label=expr];
# 105 -> 106;
# 106 [label=var];
# 106 -> 107;
# 107 [label="TERM: g"];
# 104 -> 108;
# 108 [label="TERM: &"];
# 104 -> 109;
# 109 [label=expr];
# 109 -> 110;
# 110 [label=var];
# 110 -> 111;
# 111 [label="TERM: q1"];
# 1 -> 112;
# 112 [label="TERM: ;"];
# 1 -> 113;
# 113 [label=stmt];
# 113 -> 114;
# 114 [label=bind];
# 114 -> 115;
# 115 [label="TERM: let"];
# 114 -> 116;
# 116 [label=pattern];
# 116 -> 117;
# 117 [label=var];
# 117 -> 118;
# 118 [label="TERM: res2"];
# 114 -> 119;
# 119 [label="TERM: ="];
# 114 -> 120;
# 120 [label=expr];
# 120 -> 121;
# 121 [label=expr];
# 121 -> 122;
# 122 [label=var];
# 122 -> 123;
# 123 [label="TERM: g"];
# 120 -> 124;
# 124 [label="TERM: &"];
# 120 -> 125;
# 125 [label=expr];
# 125 -> 126;
# 126 [label=var];
# 126 -> 127;
# 127 [label="TERM: q2"];
# 1 -> 128;
# 128 [label="TERM: ;"];
# 1 -> 129;
# 129 [label=stmt];
# 129 -> 130;
# 130 [label=print];
# 130 -> 131;
# 131 [label="TERM: print"];
# 130 -> 132;
# 132 [label=expr];
# 132 -> 133;
# 133 [label=var];
# 133 -> 134;
# 134 [label="TERM: res1"];
# 1 -> 135;
# 135 [label="TERM: ;"];
# 1 -> 136;
# 136 [label=stmt];
# 136 -> 137;
# 137 [label=bind];
# 137 -> 138;
# 138 [label="TERM: let"];
# 137 -> 139;
# 139 [label=pattern];
# 139 -> 140;
# 140 [label=var];
# 140 -> 141;
# 141 [label="TERM: s"];
# 137 -> 142;
# 142 [label="TERM: ="];
# 137 -> 143;
# 143 [label=expr];
# 143 -> 144;
# 144 [label="TERM: get_start"];
# 143 -> 145;
# 145 [label=expr];
# 145 -> 146;
# 146 [label=var];
# 146 -> 147;
# 147 [label="TERM: g"];
# 1 -> 148;
# 148 [label="TERM: ;"];
# 1 -> 149;
# 149 [label=stmt];
# 149 -> 150;
# 150 [label=bind];
# 150 -> 151;
# 151 [label="TERM: let"];
# 150 -> 152;
# 152 [label=pattern];
# 152 -> 153;
# 153 [label=var];
# 153 -> 154;
# 154 [label="TERM: vertices1"];
# 150 -> 155;
# 155 [label="TERM: ="];
# 150 -> 156;
# 156 [label=expr];
# 156 -> 157;
# 157 [label="TERM: filter"];
# 156 -> 158;
# 158 [label=expr];
# 158 -> 159;
# 159 [label="TERM: ("];
# 158 -> 160;
# 160 [label=expr];
# 160 -> 161;
# 161 [label="TERM: map"];
# 160 -> 162;
# 162 [label=expr];
# 162 -> 163;
# 163 [label="TERM: ("];
# 162 -> 164;
# 164 [label=expr];
# 164 -> 165;
# 165 [label="TERM: get_edges"];
# 164 -> 166;
# 166 [label=expr];
# 166 -> 167;
# 167 [label=var];
# 167 -> 168;
# 168 [label="TERM: res1"];
# 162 -> 169;
# 169 [label="TERM: )"];
# 160 -> 170;
# 170 [label="TERM: with"];
# 160 -> 171;
# 171 [label=lambda];
# 171 -> 172;
# 172 [label=pattern];
# 172 -> 173;
# 173 [label="TERM: ("];
# 172 -> 174;
# 174 [label=pattern];
# 174 -> 175;
# 175 [label="TERM: ("];
# 174 -> 176;
# 176 [label=pattern];
# 176 -> 177;
# 177 [label=var];
# 177 -> 178;
# 178 [label="TERM: u_g"];
# 174 -> 179;
# 179 [label="TERM: ,"];
# 174 -> 180;
# 180 [label=pattern];
# 180 -> 181;
# 181 [label=var];
# 181 -> 182;
# 182 [label="TERM: u_q1"];
# 174 -> 183;
# 183 [label="TERM: )"];
# 172 -> 184;
# 184 [label="TERM: ,"];
# 172 -> 185;
# 185 [label=pattern];
# 185 -> 186;
# 186 [label=var];
# 186 -> 187;
# 187 [label="TERM: l"];
# 172 -> 188;
# 188 [label="TERM: ,"];
# 172 -> 189;
# 189 [label=pattern];
# 189 -> 190;
# 190 [label="TERM: ("];
# 189 -> 191;
# 191 [label=pattern];
# 191 -> 192;
# 192 [label=var];
# 192 -> 193;
# 193 [label="TERM: v_g"];
# 189 -> 194;
# 194 [label="TERM: ,"];
# 189 -> 195;
# 195 [label=pattern];
# 195 -> 196;
# 196 [label=var];
# 196 -> 197;
# 197 [label="TERM: v_q1"];
# 189 -> 198;
# 198 [label="TERM: )"];
# 172 -> 199;
# 199 [label="TERM: )"];
# 171 -> 200;
# 200 [label="TERM: =>"];
# 171 -> 201;
# 201 [label=expr];
# 201 -> 202;
# 202 [label=var];
# 202 -> 203;
# 203 [label="TERM: u_g"];
# 158 -> 204;
# 204 [label="TERM: )"];
# 156 -> 205;
# 205 [label="TERM: with"];
# 156 -> 206;
# 206 [label=lambda];
# 206 -> 207;
# 207 [label=pattern];
# 207 -> 208;
# 208 [label=var];
# 208 -> 209;
# 209 [label="TERM: v"];
# 206 -> 210;
# 210 [label="TERM: =>"];
# 206 -> 211;
# 211 [label=expr];
# 211 -> 212;
# 212 [label=expr];
# 212 -> 213;
# 213 [label=var];
# 213 -> 214;
# 214 [label="TERM: v"];
# 211 -> 215;
# 215 [label="TERM: in"];
# 211 -> 216;
# 216 [label=expr];
# 216 -> 217;
# 217 [label=var];
# 217 -> 218;
# 218 [label="TERM: s"];
# 1 -> 219;
# 219 [label="TERM: ;"];
# 1 -> 220;
# 220 [label=stmt];
# 220 -> 221;
# 221 [label=bind];
# 221 -> 222;
# 222 [label="TERM: let"];
# 221 -> 223;
# 223 [label=pattern];
# 223 -> 224;
# 224 [label=var];
# 224 -> 225;
# 225 [label="TERM: vertices2"];
# 221 -> 226;
# 226 [label="TERM: ="];
# 221 -> 227;
# 227 [label=expr];
# 227 -> 228;
# 228 [label="TERM: filter"];
# 227 -> 229;
# 229 [label=expr];
# 229 -> 230;
# 230 [label="TERM: ("];
# 229 -> 231;
# 231 [label=expr];
# 231 -> 232;
# 232 [label="TERM: map"];
# 231 -> 233;
# 233 [label=expr];
# 233 -> 234;
# 234 [label="TERM: ("];
# 233 -> 235;
# 235 [label=expr];
# 235 -> 236;
# 236 [label="TERM: get_edges"];
# 235 -> 237;
# 237 [label=expr];
# 237 -> 238;
# 238 [label=var];
# 238 -> 239;
# 239 [label="TERM: res2"];
# 233 -> 240;
# 240 [label="TERM: )"];
# 231 -> 241;
# 241 [label="TERM: with"];
# 231 -> 242;
# 242 [label=lambda];
# 242 -> 243;
# 243 [label=pattern];
# 243 -> 244;
# 244 [label="TERM: ("];
# 243 -> 245;
# 245 [label=pattern];
# 245 -> 246;
# 246 [label="TERM: ("];
# 245 -> 247;
# 247 [label=pattern];
# 247 -> 248;
# 248 [label=var];
# 248 -> 249;
# 249 [label="TERM: u_g"];
# 245 -> 250;
# 250 [label="TERM: ,"];
# 245 -> 251;
# 251 [label=pattern];
# 251 -> 252;
# 252 [label=var];
# 252 -> 253;
# 253 [label="TERM: u_q2"];
# 245 -> 254;
# 254 [label="TERM: )"];
# 243 -> 255;
# 255 [label="TERM: ,"];
# 243 -> 256;
# 256 [label=pattern];
# 256 -> 257;
# 257 [label=var];
# 257 -> 258;
# 258 [label="TERM: l"];
# 243 -> 259;
# 259 [label="TERM: ,"];
# 243 -> 260;
# 260 [label=pattern];
# 260 -> 261;
# 261 [label="TERM: ("];
# 260 -> 262;
# 262 [label=pattern];
# 262 -> 263;
# 263 [label=var];
# 263 -> 264;
# 264 [label="TERM: v_g"];
# 260 -> 265;
# 265 [label="TERM: ,"];
# 260 -> 266;
# 266 [label=pattern];
# 266 -> 267;
# 267 [label=var];
# 267 -> 268;
# 268 [label="TERM: v_q2"];
# 260 -> 269;
# 269 [label="TERM: )"];
# 243 -> 270;
# 270 [label="TERM: )"];
# 242 -> 271;
# 271 [label="TERM: =>"];
# 242 -> 272;
# 272 [label=expr];
# 272 -> 273;
# 273 [label=var];
# 273 -> 274;
# 274 [label="TERM: u_g"];
# 229 -> 275;
# 275 [label="TERM: )"];
# 227 -> 276;
# 276 [label="TERM: with"];
# 227 -> 277;
# 277 [label=lambda];
# 277 -> 278;
# 278 [label="TERM: ("];
# 277 -> 279;
# 279 [label=lambda];
# 279 -> 280;
# 280 [label=pattern];
# 280 -> 281;
# 281 [label=var];
# 281 -> 282;
# 282 [label="TERM: v"];
# 279 -> 283;
# 283 [label="TERM: =>"];
# 279 -> 284;
# 284 [label=expr];
# 284 -> 285;
# 285 [label=expr];
# 285 -> 286;
# 286 [label=var];
# 286 -> 287;
# 287 [label="TERM: v"];
# 284 -> 288;
# 288 [label="TERM: in"];
# 284 -> 289;
# 289 [label=expr];
# 289 -> 290;
# 290 [label=var];
# 290 -> 291;
# 291 [label="TERM: s"];
# 277 -> 292;
# 292 [label="TERM: )"];
# 1 -> 293;
# 293 [label="TERM: ;"];
# 1 -> 294;
# 294 [label=stmt];
# 294 -> 295;
# 295 [label=bind];
# 295 -> 296;
# 296 [label="TERM: let"];
# 295 -> 297;
# 297 [label=pattern];
# 297 -> 298;
# 298 [label=var];
# 298 -> 299;
# 299 [label="TERM: vertices"];
# 295 -> 300;
# 300 [label="TERM: ="];
# 295 -> 301;
# 301 [label=expr];
# 301 -> 302;
# 302 [label=expr];
# 302 -> 303;
# 303 [label=var];
# 303 -> 304;
# 304 [label="TERM: vertices1"];
# 301 -> 305;
# 305 [label="TERM: &"];
# 301 -> 306;
# 306 [label=expr];
# 306 -> 307;
# 307 [label=var];
# 307 -> 308;
# 308 [label="TERM: vertices2"];
# 1 -> 309;
# 309 [label="TERM: ;"];
# 1 -> 310;
# 310 [label=stmt];
# 310 -> 311;
# 311 [label=print];
# 311 -> 312;
# 312 [label="TERM: print"];
# 311 -> 313;
# 313 [label=expr];
# 313 -> 314;
# 314 [label=var];
# 314 -> 315;
# 315 [label="TERM: vertices"];
# 1 -> 316;
# 316 [label="TERM: ;"];
# 1 -> 317;
# 317 [label="TERM: <EOF>"];
# }
# """
#     )